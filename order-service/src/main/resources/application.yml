server:
  port: 9002
spring:
  application:
    name: order-service
  redis:
    url: localhost
    password: root123
    database: 0
    port: 6379
  datasource:
    url: jdbc:log4jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8
    username: root
    password: root123
    driver-class-name: net.sf.log4jdbc.DriverSpy
    hikari:
      connection-test-query: select 1
      maximum-pool-size: 100
      max-lifetime: 30000
      minimum-idle: 10
  zipkin:
    base-url:
    sender:
      type: web
    enabled: true
  rabbitmq:
    listener:
      direct:
        acknowledge-mode: manual
      simple:
        #每个listener在初始化的时候设置的并发消费者的个数
        acknowledge-mode: manual
        concurrency: 5
        #每个listener最大的消费数量
        max-concurrency: 5
logging:
  config: classpath:log4j2.xml
  #暴露端点，这样actuator就可以监控的到健康状况
  management:
    endpoints:
      web:
        exposure:
          include: '*'
mybatis:
  mapper-locations:
    - classpath*:/mapper/*Dao.xml
  type-aliases-package: com.fuhx.entity

dubbo:
  application:
    name: order-service
  registry:
    address: nacos://127.0.0.1:8848
  protocol:
    name: dubbo
    prot: -1
  consumer:
    timeout: 100000
#feign:
#  hystrix:
#    enabled: false
#是否使用分布式事务
seata:
  enabled: true
  application-id: ${spring.application.name}
  #事务组，默认的跟服务端保持一致即可
  tx-service-group: my_test_tx_group
  enable-auto-data-source-proxy: true
  config:
    type: nacos
    nacos:
      namespace: "6744230a-8663-471a-88b0-3c277610b521"
      serverAddr: 127.0.0.1:8848
      group: "DEFAULT_GROUP"
      userName: ""
      password: ""
      data-id: "seataServer.properties"
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: 127.0.0.1:8848
      namespace: "6744230a-8663-471a-88b0-3c277610b521"
      userName: ""
      password: ""
      group: "DEFAULT_GROUP"
debug: true